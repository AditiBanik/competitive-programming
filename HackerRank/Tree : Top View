/*
class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

*/
    void travel(Node* root,int depth,int cord,map<int,pair<int,int>>& m){
        if(root==NULL){
            return;
        }
        if(m.count(cord)==0){
            m[cord]=make_pair(depth,root->data);
        }
        else{
            if(m[cord].first>depth){
                m[cord]=make_pair(depth,root->data);
            }
        }
        
        travel(root->left,depth+1,cord-1,m);
        travel(root->right,depth+1,cord+1,m);   
    }
    
    void topView(Node * root) {
        int depth=0;
        int cord=0;
        map<int,pair<int,int>> m;
        travel(root,depth,cord,m);
        
        for(auto it:m){
            cout<<it.second.second<<" ";
        }
        
    }
