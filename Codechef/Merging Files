

#include<bits/stdc++.h>
using namespace std;
#define ll long long 

ll t=1;
void solve()
{
    ll N,K;
    cin>>N>>K;
    // using a min priority queue as we are greedily trying to merge all the files 
    // with smaller size first 
    	priority_queue<ll,vector<ll>, greater<ll> > pq;
		for(ll i=0;i<N;i++)
		{
			ll sz; 
            cin>>sz;
			pq.push(sz);
		}
		while((pq.size()-K)%(K-1)!=0)
		{
			pq.push(0);
		}
		ll comparisons=0;
		while(pq.size()>1)
		{
			ll files_remaining = pq.size();
			ll new_comparisons=0;
			for(ll i=0;i<min(K,files_remaining);i++)
			{
				ll x = pq.top();
                // cout<<x<<" ";
				pq.pop();
				new_comparisons+=x;
			} 
            // cout<<new_comparisons<<" ..";
            // ln;
			comparisons+=new_comparisons;
			ll size_of_new_file_created=new_comparisons;
            // inserting the size of newly created file after merger 
			pq.push(size_of_new_file_created);
		}
        // ln;
		cout<<"Case "<<t++<<": "<<comparisons;
}
signed main()
{
ll testCases=1;
   cin>>testCases;
   while(testCases--)
   {
       solve();
       ln;
   }
}
