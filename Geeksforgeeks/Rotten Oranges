class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        queue<vector<int>> q;
        vector<vector<int>> dir= {{-1,0},{1,0},{0,1},{0,-1}};
        int fresh=0;
        int res=-1;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(grid[i][j]==1){
                    fresh+=1;
                }
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        
        while(!q.empty()){
            int len = q.size();
            for(int i=0;i<len;i++){
                vector<int> curr = q.front();
                q.pop();
                for(int j=0;j<4;j++){
                    int x = curr[0] + dir[j][0]; 
                    int y = curr[1] + dir[j][1];
                    
                    if((x>=0 and x<grid.size()) and (y>=0 and y<grid[0].size()) and grid[x][y]==1){
                        grid[x][y]=2;
                        fresh-=1;
                        q.push({x,y});
                    }
                }
            }
            res+=1;
        }
        
        if(fresh>0){
            return -1;
        }
        if(res==-1){
            return 0;
        }
        return res;
    }
};
