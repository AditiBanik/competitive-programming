class Solution
{
    public:
    //Function to find whether a path exists from the source to destination.
    
    void findpath(vector<vector<int>>& grid,int posx,int posy,vector<vector<bool>>& visited,int n){
        
        if(posx<0 || posx>=n || posy<0 || posy>=n || grid[posx][posy]==0 || visited[posx][posy]==true){
            return;
        }
        
        visited[posx][posy]=true;
        
        findpath(grid,posx-1,posy,visited,n);
        findpath(grid,posx,posy-1,visited,n);
        findpath(grid,posx+1,posy,visited,n);
        findpath(grid,posx,posy+1,visited,n);
    }
    
    bool is_Possible(vector<vector<int>>& grid) 
    {
        int posx,posy,endx,endy;
        int n=grid.size();
        vector<vector<bool>> visited(n,vector<bool>(n,false));
    
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    posx=i;
                    posy=j;
                }
                else if(grid[i][j]==2){
                    endx=i;
                    endy=j;
                }
            }
        }
        
        findpath(grid,posx,posy,visited,n);
        return visited[endx][endy];
    }
};
