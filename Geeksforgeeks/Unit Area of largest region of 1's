class Solution
{
    public:
    
    int DFS(vector<vector<int>>& grid,int posx,int posy,int n,int m,int dir[][2]){
                int count=1;
                grid[posx][posy]=0;
                
                for(int i=0;i<8;i++){
                    int x=posx+dir[i][0];
                    int y=posy+dir[i][1];
                    if(x>=0 && x<n && y>=0 && y<m && grid[x][y]==1){
                        count+=DFS(grid,x,y,n,m,dir);
                    }
                }
                return count;
    }
    
    int findMaxArea(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int dir[][2]={{-1,-1},{1,1},{0,1},{1,0},{-1,0},{0,-1},{-1,1},{1,-1}};
        int max_count=-1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    max_count=max(max_count,DFS(grid,i,j,n,m,dir));
                }
            }
        }
        return max_count;
    }
};
