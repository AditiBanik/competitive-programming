/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        vector<int> res;
        if(root==nullptr){
            return 0;
        }
        queue<TreeNode*> q;
        q.push(root);
        int depth=0;
        while(!q.empty()){
            depth+=1;
            int len=q.size();
            for(int i=0;i<len;i++){
                TreeNode* front=q.front();
                q.pop();
                if(front->left){
                    q.push(front->left);
                }
                if(front->right){
                    q.push(front->right);
                }
                if(front->left==NULL && front->right==NULL){
                    res.push_back(depth);
                }
            }
        }
        for(auto it:res){
            cout<<it<<" ";
        }
        return *min_element(res.begin(),res.end());
    
    }
};
