/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> first;
    vector<int> second;
    
    void travel(TreeNode* root1){
        if(root1==nullptr){
            return;
        }
        if(root1->left==nullptr && root1->right==nullptr){
            first.push_back(root1->val);
        }
        
        travel(root1->left);
        travel(root1->right);
    }
    
    void travel_second(TreeNode* root2){
        if(root2==nullptr){
            return;
        }
        if(root2->left==nullptr && root2->right==nullptr){
            second.push_back(root2->val);
        }
        
        travel_second(root2->left);
        travel_second(root2->right);
        
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        travel(root1);
        travel_second(root2);
        bool con=true;
        if(first.size()!=second.size()){
            con=false;
        }
        else{
            for(int i=0;i<first.size();i++){
                if(first[i]!=second[i]){
                    con=false;
                    break;
                }
            }
        }
    
        return con;
    }
};
