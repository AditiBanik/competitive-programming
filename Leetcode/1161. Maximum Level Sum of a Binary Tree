/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        vector<int> total;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int sum=0;
            int len=q.size();
            for(int i=0;i<len;i++){
                TreeNode* front=q.front();
                q.pop();
                if(front->left!=NULL){
                    q.push(front->left);
                }
                if(front->right!=NULL){
                    q.push(front->right);
                }
                sum+=front->val;
            }
            total.push_back(sum);
        }
        int index=0;
        int max=total[0];
        for(int i=1;i<total.size();i++){
            if(total[i]>max){
                max=total[i];
                index=i;
            }
        }
        cout<<index+1<<endl;
        return index+1;
    }
};
