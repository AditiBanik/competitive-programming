/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<string>> printTree(TreeNode* root) {
        int h= getheight(root);
        int w=getwidth(root);
        vector<vector<string>> v(h,vector<string>(w,""));
        int depth=0;
        travel(root,depth,0,w-1,v);
        return v;
    }
private:
    
    int getheight(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        int l=getheight(root->left);
        int r=getheight(root->right);
        return max(l,r)+1;
    }
    int getwidth(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        int l=getwidth(root->left);
        int r=getwidth(root->right);
        return max(l,r)*2+1;
    }
    
    void travel(TreeNode* root,int depth,int l,int w,vector<vector<string>>& v){
        if(!root){
            return;
        }
        int mid = l+(w-l)/2;
        v[depth][mid]=to_string(root->val);
        travel(root->left,depth+1,l,mid-1,v);
        travel(root->right,depth+1,mid+1,w,v);
    }

};
