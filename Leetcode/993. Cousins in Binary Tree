/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        if(root==NULL){
            return false;
        }
        queue<TreeNode*> q;
        vector<int> ans;
        int depth=0;
        q.push(root);
        while(!q.empty()){
            int len=q.size();
            for(int i=0;i<len;i++){
                TreeNode* front=q.front();
                q.pop();
                if(front->left){
                    q.push(front->left);
                    if(front->left->val==x || front->left->val==y){
                        ans.push_back(front->val);
                        ans.push_back(depth+1);
                    }
                }
                if(front->right){
                    q.push(front->right);
                     if(front->right->val==x || front->right->val==y){
                        ans.push_back(front->val);
                        ans.push_back(depth+1);
                    }
                }
            }
            depth+=1;
        }
        
        for(auto it:ans){
            cout<<it<<" ";
        }
        if(ans.size()==4){
            if(ans[1]==ans[3]){
                if(ans[0]!=ans[2]){
                    return true;
                }
            }
        }
    
        return false;
    }
};
