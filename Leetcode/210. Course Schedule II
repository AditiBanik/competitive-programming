class Solution {
public:
    vector<int> ans;
    
    bool iscycle(vector<int> adj[],vector<int>& vis,int node){
        if(vis[node]==1){
            return true;
        }
        if(vis[node]==0){
            vis[node]=1;
            for(auto it:adj[node]){
                if(iscycle(adj,vis,it)){
                    return true;
                }
            }
        }
        vis[node]=2;
        return false;
    }
    
    bool checkcycle(int numCourses, vector<vector<int>>& prerequisites){
        vector<int> vis(numCourses,0);
        vector<int> adj[numCourses];
        for(auto it:prerequisites){
            adj[it[0]].push_back(it[1]);
        }
        for(int i=0;i<numCourses;i++){
            if(iscycle(adj,vis,i)){
                return false;
            }
        }
        return true;
    }
    
    void dfs(vector<int> adj[],vector<int>& v,int node){
        v[node]=1;
        for(auto it:adj[node]){
            if(v[it]==0){
                dfs(adj,v,it);
            }
        }
        ans.push_back(node);
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        if(!checkcycle(numCourses,prerequisites)){
            return {};
        }
        else{
            vector<int> v(numCourses,0);
            vector<int> adj[numCourses];
            
            for(auto it:prerequisites){
                adj[it[0]].push_back(it[1]);
            }
            
            for(int i=0;i<numCourses;i++){
                if(v[i]==0){
                    dfs(adj,v,i);
                }
            }
            return ans;
        }
    }
};
