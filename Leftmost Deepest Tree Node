/**
 * class Tree {
 *     public:
 *         int val;
 *         Tree *left;
 *         Tree *right;
 * };
 */
int solve(Tree* root) {
    if(root==NULL){
        return 0;
    }
    map<int,vector<int>> m;
    queue<Tree*> q;
    q.push(root);
    int depth=0;
    while(!q.empty()){
        int len=q.size();
        for(int i=0;i<len;i++){
            Tree* front=q.front();
            q.pop();
            if(front->left){
                q.push(front->left);
            }
            if(front->right){
                q.push(front->right);
            }
            if(front->left==NULL && front->right==NULL){
                m[depth].push_back(front->val);
            }
        }
        depth+=1;
    }
    vector<int> t;
    for(auto it:m){
        t=it.second;
    }
    return t[0];
}
